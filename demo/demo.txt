
polygon ChainId = 137;
base sepolia ChainId = 84532;

1. deploy contracts on both chains
source .env 

// deploy on base 
forge script script/BridgeScript.s.sol \
  --rpc-url $BASE_SEPOLIA_RPC_URL \
  --private-key $PRIVATE_KEY \
  --broadcast

Bn254SignatureScheme contract deployed at:  0x1665D1aCf52f44c505aa6fcaD4901674d1bd4fCe
Mock Polygon USDC contract deployed at:  0xF5A8Be871b75E6fA37E7ff1ED689b49B4Bf28ed3
LiquidityPool contract deployed at:  0x33ab89901b8d4532E4269EE1Ce7b7A2867B8D6fB
PoolAddressProvider contract deployed at:  0x1F0F3b7051C2a8803E78B585d7DbE57cceA61b81
Router contract deployed at:  0x7B5E94a1C77c344c1904E21efdAf9138d7a09f9B

// deploy on polygon
forge script script/DeployContracts.s.sol \
  --rpc-url $POLYGON_POS_RPC_URL \
  --private-key $PRIVATE_KEY \
  --broadcast

Bn254SignatureScheme contract deployed at:  0x1665D1aCf52f44c505aa6fcaD4901674d1bd4fCe
Mock Polygon USDC contract deployed at:  0xF5A8Be871b75E6fA37E7ff1ED689b49B4Bf28ed3
LiquidityPool contract deployed at:  0x33ab89901b8d4532E4269EE1Ce7b7A2867B8D6fB
PoolAddressProvider contract deployed at:  0x1F0F3b7051C2a8803E78B585d7DbE57cceA61b81
Router contract deployed at:  0x7B5E94a1C77c344c1904E21efdAf9138d7a09f9B



2. configure contracts on base 

// map src and dst token addresses and chain ids
cast send 0x7B5E94a1C77c344c1904E21efdAf9138d7a09f9B "setTokenMapping(address,uint256,uint256,address)" 0xF5A8Be871b75E6fA37E7ff1ED689b49B4Bf28ed3 84532 137 0xF5A8Be871b75E6fA37E7ff1ED689b49B4Bf28ed3 \
  --rpc-url $BASE_SEPOLIA_RPC_URL \
  --private-key $PRIVATE_KEY

// transfer pool ownership to router
cast send 0x33ab89901b8d4532E4269EE1Ce7b7A2867B8D6fB "transferOwnership(address)" 0x7B5E94a1C77c344c1904E21efdAf9138d7a09f9B \
  --rpc-url $BASE_SEPOLIA_RPC_URL \
  --private-key $PRIVATE_KEY

// permit messages from other src chain ids
cast send 0x7B5E94a1C77c344c1904E21efdAf9138d7a09f9B "allowSrcChainId(uint256,bool)" 137 true \
  --rpc-url $BASE_SEPOLIA_RPC_URL \
  --private-key $PRIVATE_KEY

// register src liquidity pool in pool provider contract
cast send 0x1F0F3b7051C2a8803E78B585d7DbE57cceA61b81 "registerPool(address,uint256,address)" 0xF5A8Be871b75E6fA37E7ff1ED689b49B4Bf28ed3 84532 0x33ab89901b8d4532E4269EE1Ce7b7A2867B8D6fB \
    --rpc-url $BASE_SEPOLIA_RPC_URL \
    --private-key $PRIVATE_KEY

3. configure contracts on polygon

// map src and dst token addresses and chain ids
cast send 0x7B5E94a1C77c344c1904E21efdAf9138d7a09f9B "setTokenMapping(address,uint256,uint256,address)" 0xF5A8Be871b75E6fA37E7ff1ED689b49B4Bf28ed3 137 84532 0xF5A8Be871b75E6fA37E7ff1ED689b49B4Bf28ed3 \
  --rpc-url $POLYGON_POS_RPC_URL \
  --private-key $PRIVATE_KEY

// transfer pool ownership to router
cast send 0x33ab89901b8d4532E4269EE1Ce7b7A2867B8D6fB "transferOwnership(address)" 0x7B5E94a1C77c344c1904E21efdAf9138d7a09f9B \
  --rpc-url $POLYGON_POS_RPC_URL \
  --private-key $PRIVATE_KEY

// permit messages from other src chain ids
cast send 0x7B5E94a1C77c344c1904E21efdAf9138d7a09f9B "allowSrcChainId(uint256,bool)" 84532 true \
  --rpc-url $POLYGON_POS_RPC_URL \
  --private-key $PRIVATE_KEY

// register src liquidity pool in pool provider contract
cast send 0x1F0F3b7051C2a8803E78B585d7DbE57cceA61b81 "registerPool(address,uint256,address)" 0xF5A8Be871b75E6fA37E7ff1ED689b49B4Bf28ed3 137 0x33ab89901b8d4532E4269EE1Ce7b7A2867B8D6fB \
    --rpc-url $POLYGON_POS_RPC_URL \
    --private-key $PRIVATE_KEY


4. make a cross chain transfer request from polygon to base

// mint 50 to sender
cast send 0xF5A8Be871b75E6fA37E7ff1ED689b49B4Bf28ed3 "mint(address,uint256)" 0xDC21c5F25E196b0C7E13F2C6f3184368059047FF 50e18 \
    --rpc-url $POLYGON_POS_RPC_URL \
    --private-key $PRIVATE_KEY

// approve tokens for router contract
cast send 0xF5A8Be871b75E6fA37E7ff1ED689b49B4Bf28ed3 "approve(address,uint256)" 0x7B5E94a1C77c344c1904E21efdAf9138d7a09f9B 50e18 \
    --rpc-url $POLYGON_POS_RPC_URL \
    --private-key $PRIVATE_KEY

// make a bridge request for 6e18 (send to a random recipient from anvil)
// router will extract fees from that amount for liquidity providers
// rebalancing logic (TBC) is to batch all collected amounts and fees and send to destination chain
// currently router is set to take 5% of the transfer amount
// e.g., > 5700000000000000000 / 1e18 = // 5.7
// > 0.05 * 6 = // 0.30000000000000004
cast send 0x7B5E94a1C77c344c1904E21efdAf9138d7a09f9B "bridge(address,uint256,uint256,address,uint256)" \
    0xF5A8Be871b75E6fA37E7ff1ED689b49B4Bf28ed3 6e18 84532 0x23618e81E3f5cdF7f54C3d65f7FBc0aBf5B21E8f 2 \
    --rpc-url $POLYGON_POS_RPC_URL \
    --private-key $PRIVATE_KEY

// recipient balances 
cast call 0xF5A8Be871b75E6fA37E7ff1ED689b49B4Bf28ed3 "balanceOf(address)(uint256)" 0x23618e81E3f5cdF7f54C3d65f7FBc0aBf5B21E8f \
    --rpc-url $POLYGON_POS_RPC_URL

cast call 0xF5A8Be871b75E6fA37E7ff1ED689b49B4Bf28ed3 "balanceOf(address)(uint256)" 0x23618e81E3f5cdF7f54C3d65f7FBc0aBf5B21E8f \
    --rpc-url $BASE_SEPOLIA_RPC_URL
