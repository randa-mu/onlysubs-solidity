
polygon ChainId = 137;
base sepolia ChainId = 84532;

1. deploy contracts on both chains
source .env 

// deploy on base 
forge script script/DeployAllContracts.s.sol \
  --rpc-url $BASE_SEPOLIA_RPC_URL \
  --private-key $PRIVATE_KEY \
  --broadcast

Bn254SignatureScheme contract deployed at:  0x2466F7c06c6Bc623F59bB9705edEf2B62eAe0acf
  RUSD contract deployed at:  0x46D346f8d9582f8963110108A7988B1a0bB3668D
  Router contract deployed at:  0xEBa6Df4a0cc479646EEEBB39C902F0F682595A43

// deploy on polygon
forge script script/DeployAllContracts.s.sol \
  --rpc-url $POLYGON_POS_RPC_URL \
  --private-key $PRIVATE_KEY \
  --broadcast

Bn254SignatureScheme contract deployed at:  0x2466F7c06c6Bc623F59bB9705edEf2B62eAe0acf
  RUSD contract deployed at:  0x46D346f8d9582f8963110108A7988B1a0bB3668D
  Router contract deployed at:  0xEBa6Df4a0cc479646EEEBB39C902F0F682595A43


export BN254_SIGNATURE_SCHEME_CONTRACT=0x2466F7c06c6Bc623F59bB9705edEf2B62eAe0acf
export RUSD_CONTRACT=0x46D346f8d9582f8963110108A7988B1a0bB3668D
export ROUTER_CONTRACT=0xEBa6Df4a0cc479646EEEBB39C902F0F682595A43
export SENDER=0xDC21c5F25E196b0C7E13F2C6f3184368059047FF
export RECIPIENT=0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2

2. configure contracts on base 

// permit messages from other src chain ids
cast send $ROUTER_CONTRACT "permitDestinationChainId(uint256)" 137 \
  --rpc-url $BASE_SEPOLIA_RPC_URL \
  --private-key $PRIVATE_KEY

// map src and dst token addresses and chain ids
cast send $ROUTER_CONTRACT "setTokenMapping(uint256,address,address)" 137 $RUSD_CONTRACT $RUSD_CONTRACT \
  --rpc-url $BASE_SEPOLIA_RPC_URL \
  --private-key $PRIVATE_KEY


3. configure contracts on polygon

// permit messages from other src chain ids
cast send $ROUTER_CONTRACT "permitDestinationChainId(uint256)" 84532 \
  --rpc-url $POLYGON_POS_RPC_URL \
  --private-key $PRIVATE_KEY

// map src and dst token addresses and chain ids
cast send $ROUTER_CONTRACT "setTokenMapping(uint256,address,address)" 84532 $RUSD_CONTRACT $RUSD_CONTRACT \
  --rpc-url $POLYGON_POS_RPC_URL \
  --private-key $PRIVATE_KEY

4. mint tokens and approve source chain router 

// mint 11 to sender on source chain
// 10 tokens to bridge + 1 token in fees
cast send $RUSD_CONTRACT "mint(address,uint256)" $SENDER 11e18 \
    --rpc-url $POLYGON_POS_RPC_URL \
    --private-key $PRIVATE_KEY

// approve tokens for router contract on the source chain
cast send $RUSD_CONTRACT "approve(address,uint256)" $ROUTER_CONTRACT 11e18 \
    --rpc-url $POLYGON_POS_RPC_URL \
    --private-key $PRIVATE_KEY


5. start agent in another terminal window 
// ensure correct Router contract address is set in .env file for all supported chains
npx ts-node demo/demo.ts

6. make a bridge request from polygon pos to base sepolia 
// for 10e18 (send to a random recipient from anvil)
// with a fee of 1e18.
// router collects the fee plus amount to transfer
// and allocates a portion of the fee for the solver
// who fulfills the request on the destination chain id
// and the rest of it is held in the contract for the dcipher threshold network 
// So recipient will get 10e18 on destination chain.
cast send $ROUTER_CONTRACT "requestCrossChainSwap(address,uint256,uint256,uint256,address)" \
    $RUSD_CONTRACT 10e18 1e18 84532 $RECIPIENT \
    --rpc-url $POLYGON_POS_RPC_URL \
    --private-key $PRIVATE_KEY

// recipient token balances on both chain
cast call $RUSD_CONTRACT "balanceOf(address)(uint256)" $RECIPIENT \
    --rpc-url $POLYGON_POS_RPC_URL

cast call $RUSD_CONTRACT "balanceOf(address)(uint256)" $RECIPIENT \
    --rpc-url $BASE_SEPOLIA_RPC_URL
